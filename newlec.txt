cartConstants

export const ADD_TO_CART = 'ADD_TO_CART'

export const REMOVE_ITEM_CART = 'REMOVE_ITEM_CART'

export const SAVE_SHIPPING_INFO = 'SAVE_SHIPPING_INFO'



cartreducers

import { ADD_TO_CART } from '../constants/cartConstants'



export const cartReducer = (state = { cartItems: [],  }, action) => {

    console.log(state.cartItems)

    switch (action.type) {



        case ADD_TO_CART:

            const item = action.payload;



            const isItemExist = state.cartItems.find(i => i.product === item.product)



            if (isItemExist) {

                return {

                    ...state,

                    cartItems: state.cartItems.map(i => i.product === isItemExist.product ? item : i)

                }

            } else {

                return {

                    ...state,

                    cartItems: [...state.cartItems, item]

                }

            }

        default:

            return state

    }

}



cartActions

import axios from 'axios'

import { ADD_TO_CART } from '../constants/cartConstants'



export const addItemToCart = (id, quantity) => async (dispatch, getState) => {

    const { data } = await axios.get(`/api/v1/product/${id}`)



    dispatch({

        type: ADD_TO_CART,

        payload: {

            product: data.product._id,

            name: data.product.name,

            price: data.product.price,

            image: data.product.images[0].url,

            stock: data.product.stock,

            quantity

        }

    })



    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))

}



store.js



import { cartReducer } from './reducers/cartReducers'



cart: cartReducer



components/product/productDetails

import { addItemToCart } from '../../actions/cartActions'

const addToCart = () => {

        dispatch(addItemToCart(id, quantity));

        alert.success('Item Added to Cart')

    }



<button type="button" id="cart_btn" className="btn btn-primary d-inline ml-4" disabled={product.stock === 0} onClick={addToCart}>Add to Cart</button>



components/cart/cart.js

import React, { Fragment } from 'react'

import { Link } from 'react-router-dom'



import MetaData from '../layout/MetaData'

import { useDispatch, useSelector } from 'react-redux'

import { addItemToCart } from '../../actions/cartActions'

// import { addItemToCart, removeItemFromCart } from '../../actions/cartActions'



const Cart = () => {

    const dispatch = useDispatch();

    const { cartItems } = useSelector(state => state.cart)

    const increaseQty = (id, quantity, stock) => {

        const newQty = quantity + 1;

        if (newQty > stock) return;

        dispatch(addItemToCart(id, newQty))

    }

    const decreaseQty = (id, quantity) => {

        const newQty = quantity - 1;

        if (newQty <= 0) return;

        dispatch(addItemToCart(id, newQty))

    }

    return (

        <Fragment>

            <MetaData title={'Your Cart'} />

            {cartItems.length === 0 ? <h2 className="mt-5">Your Cart is Empty</h2> : (

                <Fragment>

                    <h2 className="mt-5">Your Cart: <b>{cartItems.length} items</b></h2>



                    <div className="row d-flex justify-content-between">

                        <div className="col-12 col-lg-8">

                            {cartItems.map(item => (

                                <Fragment>

                                    <hr />

                                    <div className="cart-item" key={item.product}>

                                        <div className="row">

                                            <div className="col-4 col-lg-3">

                                                <img src={item.image} alt="Laptop" height="90" width="115" />

                                            </div>



                                            <div className="col-5 col-lg-3">

                                                <Link to={`/products/${item.product}`}>{item.name}</Link>

                                            </div>

                                            <div className="col-4 col-lg-2 mt-4 mt-lg-0">

                                                <p id="card_item_price">${item.price}</p>

                                            </div>



                                            <div className="col-4 col-lg-3 mt-4 mt-lg-0">

                                                <div className="stockCounter d-inline">

                                                    <span className="btn btn-danger minus" onClick={() => decreaseQty(item.product, item.quantity)}>-</span>



                                                    <input type="number" className="form-control count d-inline" value={item.quantity} readOnly />



                                                    <span className="btn btn-primary plus" onClick={() => increaseQty(item.product, item.quantity, item.stock)}>+</span>

                                                </div>

                                            </div>



                                            <div className="col-4 col-lg-1 mt-4 mt-lg-0">

                                                {/* <i id="delete_cart_item" className="fa fa-trash btn btn-danger" onClick={() => removeCartItemHandler(item.product)} ></i>*/}

                                                <i id="delete_cart_item" className="fa fa-trash btn btn-danger" ></i>

                                            </div>



                                        </div>

                                    </div>

                                    <hr />

                                </Fragment>

                            ))}



                        </div>



                        <div className="col-12 col-lg-3 my-4">

                            <div id="order_summary">

                                <h4>Order Summary</h4>

                                <hr />

                                <p>Subtotal:  <span className="order-summary-values"></span></p>

                                <p>Est. total: <span className="order-summary-values"></span></p>

                                <hr />

                                <button id="checkout_btn" className="btn btn-primary btn-block" >Check out</button>

                            </div>

                        </div>

                    </div>

                </Fragment>

            )}

        </Fragment>

    )

}



export default Cart



header.js

const { cartItems } = useSelector(state => state.cart)

<span className="ml-1" id="cart_count">{cartItems.length}</span>



app.js

import Cart from './components/cart/Cart'

<Route path="/cart" element={<Cart />} exact="true" />



delete items from cart



cartconstants



export const REMOVE_ITEM_CART = 'REMOVE_ITEM_CART'



cartreducers

import { ADD_TO_CART, REMOVE_ITEM_CART } from '../constants/cartConstants'

case REMOVE_ITEM_CART:

            return {

                ...state,

                cartItems: state.cartItems.filter(i => i.product !== action.payload)

            }



cartActions

import { ADD_TO_CART, REMOVE_ITEM_CART } from '../constants/cartConstants'



export const removeItemFromCart = (id) => async (dispatch, getState) => {



    dispatch({

        type: REMOVE_ITEM_CART,

        payload: id

    })



    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))



}



cart component

const removeCartItemHandler = (id) => {

        dispatch(removeItemFromCart(id))

    }



<i id="delete_cart_item" className="fa fa-trash btn btn-danger" onClick={() => removeCartItemHandler(item.product)} ></i>

                                               



 <div className="col-12 col-lg-3 my-4">

                            <div id="order_summary">

                                <h4>Order Summary</h4>

                                <hr />

                                <p>Subtotal:  <span className="order-summary-values">{cartItems.reduce((acc, item) => (acc + Number(item.quantity)), 0)} (Units)</span></p>

                                <p>Est. total: <span className="order-summary-values">${cartItems.reduce((acc, item) => acc + item.quantity * item.price, 0).toFixed(2)}</span></p>



                            

                                <hr />

                                 <button id="checkout_btn" className="btn btn-primary btn-block" onClick={checkoutHandler}>Check out</button>

                                {/*<button id="checkout_btn" className="btn btn-primary btn-block" >Check out</button>*/}

                            </div>

                        </div>





shipping info

cartConstants

export const SAVE_SHIPPING_INFO = 'SAVE_SHIPPING_INFO'



cartReducers

export const cartReducer = (state = { cartItems: [], shippingInfo: {} }, action) => {

case SAVE_SHIPPING_INFO:

            return {

                ...state,

                shippingInfo: action.payload

            }



cartActions

export const saveShippingInfo = (data) => async (dispatch) => {



    dispatch({

        type: SAVE_SHIPPING_INFO,

        payload: data

    })



    localStorage.setItem('shippingInfo', JSON.stringify(data))



}



components/cart

import { useDispatch, useSelector } from 'react-redux'

import { Link, useNavigate } from 'react-router-dom'

let navigate = useNavigate();

const checkoutHandler = () => {

        navigate('/login?redirect=shipping')

    }





 <button id="checkout_btn" className="btn btn-primary btn-block" onClick={checkoutHandler}>Check out</button>



cartreducers

export const cartReducer = (state = { cartItems: [],  shippingInfo: {} },



components/cart/Shipping.js

import React, { Fragment, useState } from 'react'

import { useNavigate } from "react-router-dom";

import { countries } from 'countries-list'



import MetaData from '../layout/MetaData'

import CheckoutSteps from './CheckoutSteps'



import { useDispatch, useSelector } from 'react-redux'

import { saveShippingInfo } from '../../actions/cartActions'



const Shipping = () => {



    const countriesList = Object.values(countries)



    const { shippingInfo } = useSelector(state => state.cart)



    const [address, setAddress] = useState(shippingInfo.address)

    const [city, setCity] = useState(shippingInfo.city)

    const [postalCode, setPostalCode] = useState(shippingInfo.postalCode)

    const [phoneNo, setPhoneNo] = useState(shippingInfo.phoneNo)

    const [country, setCountry] = useState(shippingInfo.country)



    const dispatch = useDispatch();

    let navigate = useNavigate();



    const submitHandler = (e) => {

        e.preventDefault()



        dispatch(saveShippingInfo({ address, city, phoneNo, postalCode, country }))

        navigate('/confirm')

    }



    return (

        <Fragment>



            <MetaData title={'Shipping Info'} />



            <CheckoutSteps shipping />



            <div className="row wrapper">

                <div className="col-10 col-lg-5">

                    <form className="shadow-lg" onSubmit={submitHandler}>

                        <h1 className="mb-4">Shipping Info</h1>

                        <div className="form-group">

                            <label htmlFor="address_field">Address</label>

                            <input

                                type="text"

                                id="address_field"

                                className="form-control"

                                value={address}

                                onChange={(e) => setAddress(e.target.value)}

                                required

                            />

                        </div>



                        <div className="form-group">

                            <label htmlFor="city_field">City</label>

                            <input

                                type="text"

                                id="city_field"

                                className="form-control"

                                value={city}

                                onChange={(e) => setCity(e.target.value)}

                                required

                            />

                        </div>



                        <div className="form-group">

                            <label htmlFor="phone_field">Phone No</label>

                            <input

                                type="phone"

                                id="phone_field"

                                className="form-control"

                                value={phoneNo}

                                onChange={(e) => setPhoneNo(e.target.value)}

                                required

                            />

                        </div>



                        <div className="form-group">

                            <label htmlFor="postal_code_field">Postal Code</label>

                            <input

                                type="number"

                                id="postal_code_field"

                                className="form-control"

                                value={postalCode}

                                onChange={(e) => setPostalCode(e.target.value)}

                                required

                            />

                        </div>



                        <div className="form-group">

                            <label htmlFor="country_field">Country</label>

                            <select

                                id="country_field"

                                className="form-control"

                                value={country}

                                onChange={(e) => setCountry(e.target.value)}

                                required

                            >



                                {countriesList.map(country => (

                                    <option key={country.name} value={country.name}>

                                        {country.name}

                                    </option>

                                ))}



                            </select>

                        </div>



                        <button

                            id="shipping_btn"

                            type="submit"

                            className="btn btn-block py-3"

                        >

                            CONTINUE

                            </button>

                    </form>

                </div>

            </div>



        </Fragment>

    )

}



export default Shipping





store

let initialState = {

    cart: {

        cartItems: localStorage.getItem('cartItems')

            ? JSON.parse(localStorage.getItem('cartItems'))

            : [],

        shippingInfo: localStorage.getItem('shippingInfo')

             ? JSON.parse(localStorage.getItem('shippingInfo'))

            : {}

    }

}



App.js

import Shipping from './components/cart/Shipping'

<Route path="/shipping" 

            element={

             <ProtectedRoute >

                 <Shipping />

             </ProtectedRoute> } exact="true" />



//login

import { Link, useNavigate, useLocation } from "react-router-dom";

let location = useLocation();

const redirect = location.search ? location.search.split('=')[1] : '/'

 if (isAuthenticated) {

            // history.push('/')

            navigate(redirect)

        }





components/cart/CheckoutSteps



import React from 'react'

import { Link } from 'react-router-dom'



import React from 'react'

import { Link } from 'react-router-dom'



const CheckoutSteps = ({ shipping

    // , confirmOrder, payment 

}) => {

    return (

        <div className="checkout-progress d-flex justify-content-center mt-5">



            {shipping ? <Link to='shippping' className="float-right">

                <div className="triangle2-active"></div>

                <div className="step active-step">Shipping</div>

                <div className="triangle-active"></div>

            </Link> : <Link to="#!" disabled>

                <div className="triangle2-incomplete"></div>

                <div className="step incomplete">Shipping</div>

                <div className="triangle-incomplete"></div>

            </Link>}



            {/* {confirmOrder ? <Link to='/order/confirm' className="float-right">

                <div className="triangle2-active"></div>

                <div className="step active-step">Confirm Order</div>

                <div className="triangle-active"></div>

            </Link> : <Link to="#!" disabled>

                <div className="triangle2-incomplete"></div>

                <div className="step incomplete">Confirm Order</div>

                <div className="triangle-incomplete"></div>

            </Link>} */}

            <div className="triangle2-incomplete"></div>

            <div className="step incomplete">Confirm Order</div>

            <div className="triangle-incomplete"></div>



            {/* {payment ? <Link to='/payment' className="float-right">

                <div className="triangle2-active"></div>

                <div className="step active-step">Payment</div>

                <div className="triangle-active"></div>

            </Link> : <Link to="#!" disabled>

                <div className="triangle2-incomplete"></div>

                <div className="step incomplete">Payment</div>

                <div className="triangle-incomplete"></div>

            </Link>} */}

            <div className="triangle2-incomplete"></div>

            <div className="step incomplete">Payment</div>

            <div className="triangle-incomplete"></div>



        </div>

    )

}



export default CheckoutSteps



Shipping

import CheckoutSteps from './CheckoutSteps'



         <MetaData title={'Shipping Info'} />

            <CheckoutSteps shipping />





cart/confirmOrder



import React, { Fragment } from 'react'

import { Link, useNavigate } from 'react-router-dom'



import MetaData from '../layout/MetaData'

import CheckoutSteps from './CheckoutSteps'



import { useSelector } from 'react-redux'





const ConfirmOrder = () => {



    const { cartItems, shippingInfo } = useSelector(state => state.cart)

    const { user } = useSelector(state => state.auth)

    let navigate = useNavigate();



    // Calculate Order Prices

    const itemsPrice = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0)

    const shippingPrice = itemsPrice > 200 ? 0 : 25

    const taxPrice = Number((0.05 * itemsPrice).toFixed(2))

    const totalPrice = (itemsPrice + shippingPrice + taxPrice).toFixed(2)



    const processToPayment = () => {

        const data = {

            itemsPrice: itemsPrice.toFixed(2),

            shippingPrice,

            taxPrice,

            totalPrice

        }



        sessionStorage.setItem('orderInfo', JSON.stringify(data))

        navigate('/payment')

    }



    return (

        <Fragment>



            <MetaData title={'Confirm Order'} />



            <CheckoutSteps shipping confirmOrder />



            <div className="row d-flex justify-content-between">

                <div className="col-12 col-lg-8 mt-5 order-confirm">



                    <h4 className="mb-3">Shipping Info</h4>

                    <p><b>Name:</b> {user && user.name}</p>

                    <p><b>Phone:</b> {shippingInfo.phoneNo}</p>

                    <p className="mb-4"><b>Address:</b> {`${shippingInfo.address}, ${shippingInfo.city}, ${shippingInfo.postalCode}, ${shippingInfo.country}`}</p>



                    <hr />

                    <h4 className="mt-4">Your Cart Items:</h4>



                    {cartItems.map(item => (

                        <Fragment>

                            <hr />

                            <div className="cart-item my-1" key={item.product}>

                                <div className="row">

                                    <div className="col-4 col-lg-2">

                                        <img src={item.image} alt="Laptop" height="45" width="65" />

                                    </div>



                                    <div className="col-5 col-lg-6">

                                        <Link to={`/product/${item.product}`}>{item.name}</Link>

                                    </div>





                                    <div className="col-4 col-lg-4 mt-4 mt-lg-0">

                                        <p>{item.quantity} x ${item.price} = <b>${(item.quantity * item.price).toFixed(2)}</b></p>

                                    </div>



                                </div>

                            </div>

                            <hr />

                        </Fragment>

                    ))}



                </div>



                <div className="col-12 col-lg-3 my-4">

                    <div id="order_summary">

                        <h4>Order Summary</h4>

                        <hr />

                        <p>Subtotal:  <span className="order-summary-values">${itemsPrice}</span></p>

                        <p>Shipping: <span className="order-summary-values">${shippingPrice}</span></p>

                        <p>Tax:  <span className="order-summary-values">${taxPrice}</span></p>



                        <hr />



                        <p>Total: <span className="order-summary-values">${totalPrice}</span></p>



                        <hr />

                        <button id="checkout_btn" className="btn btn-primary btn-block" onClick={processToPayment}>Proceed to Payment</button>

                    </div>

                </div>





            </div>



        </Fragment>

    )

}



export default ConfirmOrder



App

import ConfirmOrder from './components/cart/ConfirmOrder'

<Route path="/confirm" 

            element={

             <ProtectedRoute >

                 <ConfirmOrder />

             </ProtectedRoute> }  />



 orderconstants

 export const CREATE_ORDER_REQUEST = 'CREATE_ORDER_REQUEST'

export const CREATE_ORDER_SUCCESS = 'CREATE_ORDER_SUCCESS'

export const CREATE_ORDER_FAIL = 'CREATE_ORDER_FAIL'

export const CLEAR_ERRORS = 'CLEAR_ERRORS'





ordereducers

import {

    CREATE_ORDER_REQUEST,

    CREATE_ORDER_SUCCESS,

    CREATE_ORDER_FAIL,

    

    CLEAR_ERRORS

} from '../constants/orderConstants'



export const newOrderReducer = (state = {}, action) => {

    switch (action.type) {



        case CREATE_ORDER_REQUEST:

            return {

                ...state,

                loading: true

            }



        case CREATE_ORDER_SUCCESS:

            return {

                loading: false,

                order: action.payload

            }



        case CREATE_ORDER_FAIL:

            return {

                loading: false,

                error: action.payload

            }



        case CLEAR_ERRORS:

            return {

                ...state,

                error: null

            }



        default:

            return state;

    }

}



orderactions

import axios from 'axios'



import {

    CREATE_ORDER_REQUEST,

    CREATE_ORDER_SUCCESS,

    CREATE_ORDER_FAIL,

   

    CLEAR_ERRORS

} from '../constants/orderConstants'



export const createOrder = (order) => async (dispatch, getState) => {

    try {



        dispatch({ type: CREATE_ORDER_REQUEST })



        const config = {

            headers: {

                'Content-Type': 'application/json'

            }

        }



        const { data } = await axios.post('/api/v1/order/new', order, config)



        dispatch({

            type: CREATE_ORDER_SUCCESS,

            payload: data

        })



    } catch (error) {

        dispatch({

            type: CREATE_ORDER_FAIL,

            payload: error.response.data.message

        })

    }

}

export const clearErrors = () => async (dispatch) =>{

    dispatch({

        type: CLEAR_ERRORS



    })

}



store.js

import { newOrderReducer } from './reducers/orderReducers'

newOrder: newOrderReducer,



component/cart/payment.js

import React, { Fragment, useEffect } from 'react'

import { useNavigate } from "react-router-dom";



import MetaData from '../layout/MetaData'

import CheckoutSteps from './CheckoutSteps'



import { useAlert } from 'react-alert'

import { useDispatch, useSelector } from 'react-redux'

import { createOrder, clearErrors } from '../../actions/orderActions'



const Payment = () => {



    const alert = useAlert();

    const dispatch = useDispatch();

    let navigate = useNavigate();



    const { user } = useSelector(state => state.auth)

    const { cartItems, shippingInfo } = useSelector(state => state.cart);

    const { error } = useSelector(state => state.newOrder)



    useEffect(() => {



        if (error) {

            alert.error(error)

            dispatch(clearErrors())

        }



    }, [dispatch, alert, error])



    const order = {

        orderItems: cartItems,

        shippingInfo

    }



    const orderInfo = JSON.parse(sessionStorage.getItem('orderInfo'));

    if (orderInfo) {

        order.itemsPrice = orderInfo.itemsPrice

        order.shippingPrice = orderInfo.shippingPrice

        order.taxPrice = orderInfo.taxPrice

        order.totalPrice = orderInfo.totalPrice

    }



    const submitHandler = async (e) => {

        e.preventDefault();

        document.querySelector('#pay_btn').disabled = true;

        order.paymentInfo = {

            id: 'pi_1DpdYh2eZvKYlo2CYIynhU32',

            status: 'succeeded'

        }



        dispatch(createOrder(order))

        navigate('/success')



    }



    return (

        <Fragment>

            <MetaData title={'Payment'} />



            <CheckoutSteps shipping confirmOrder payment />



            <div className="row wrapper">

                <div className="col-10 col-lg-5">

                    <form className="shadow-lg" onSubmit={submitHandler}>

                        <h1 className="mb-4">Card Info</h1>

                        <div className="form-group">

                            <label htmlFor="card_num_field">Card Number</label>

                            <input

                                type="text"

                                id="card_num_field"

                                className="form-control"



                            />

                        </div>



                        <div className="form-group">

                            <label htmlFor="card_exp_field">Card Expiry</label>

                            <input

                                type="text"

                                id="card_exp_field"

                                className="form-control"



                            />

                        </div>



                        <div className="form-group">

                            <label htmlFor="card_cvc_field">Card CVC</label>

                            <input

                                type="text"

                                id="card_cvc_field"

                                className="form-control"



                            />

                        </div>





                        <button

                            id="pay_btn"

                            type="submit"

                            className="btn btn-block py-3"

                        >

                            Pay {` - ${orderInfo && orderInfo.totalPrice}`}

                        </button>



                    </form>

                </div>

            </div>



        </Fragment>

    )

}



export default Payment



app.js

import Payment from './components/cart/Payment'

<Route path="/payment"

          element={

            <ProtectedRoute >

              <Payment />

            </ProtectedRoute>} />

cart/orderSuccess

import React, { Fragment } from 'react'

import { Link } from 'react-router-dom'

import MetaData from '../layout/MetaData'



const OrderSuccess = () => {

    return (

        <Fragment>



            <MetaData title={'Order Success'} />



            <div className="row justify-content-center">

                <div className="col-6 mt-5 text-center">

                    <img className="my-5 img-fluid d-block mx-auto" src="/images/order_success.png" alt="Order Success" width="200" height="200" />



                    <h2>Your Order has been placed successfully.</h2>



                    <Link to="/orders/me">Go to Orders</Link>

                </div>



            </div>



        </Fragment>

    )

}



export default OrderSuccess



App.js

import OrderSuccess from './components/cart/OrderSuccess'

<Route path="/success" 

            element={

             <ProtectedRoute >

                 <OrderSuccess />

             </ProtectedRoute> }  />

payment

const submitHandler = async (e) => {

        e.preventDefault();

        document.querySelector('#pay_btn').disabled = true;

        order.paymentInfo = {

            id: 'pi_1DpdYh2eZvKYlo2CYIynhU32',

            status: 'succeeded'

        }



        dispatch(createOrder(order))

        navigate('/success')

      }



orderconstants

export const MY_ORDERS_REQUEST = 'MY_ORDERS_REQUEST'

export const MY_ORDERS_SUCCESS = 'MY_ORDERS_SUCCESS'

export const MY_ORDERS_FAIL = 'MY_ORDERS_FAIL'



orderReducers

MY_ORDERS_REQUEST,

    MY_ORDERS_SUCCESS,

    MY_ORDERS_FAIL,



    export const myOrdersReducer = (state = { orders: [] }, action) => {

    switch (action.type) {



        case MY_ORDERS_REQUEST:

            return {

                loading: true

            }



        case MY_ORDERS_SUCCESS:

            return {

                loading: false,

                orders: action.payload

            }



        case MY_ORDERS_FAIL:

            return {

                loading: false,

                error: action.payload

            }

        case CLEAR_ERRORS:

            return {

                ...state,

                error: null

            }



        default:

            return state;

    }

}



orderactions

// Get curretly logged in user orders

export const myOrders = () => async (dispatch) => {

    try {



        dispatch({ type: MY_ORDERS_REQUEST });



        const { data } = await axios.get('/api/v1/orders/me')



        dispatch({

            type: MY_ORDERS_SUCCESS,

            payload: data.orders

        })



    } catch (error) {

        dispatch({

            type: MY_ORDERS_FAIL,

            payload: error.response.data.message

        })

    }

}



components/order/listorders.js

import React, { Fragment, useEffect } from 'react'

import { Link } from 'react-router-dom'

import { MDBDataTable } from 'mdbreact'



import MetaData from '../layout/MetaData'

import Loader from '../layout/Loader'





import { useDispatch, useSelector } from 'react-redux'

import { myOrders, clearErrors } from '../../actions/orderActions'



const ListOrders = () => {



   

    const dispatch = useDispatch();



    const { loading, error, orders } = useSelector(state => state.myOrders);



    useEffect(() => {

        dispatch(myOrders());



        if (error) {

           

            dispatch(clearErrors())

        }

    }, [dispatch, error])



    const setOrders = () => {

        const data = {

            columns: [

                {

                    label: 'Order ID',

                    field: 'id',

                    sort: 'asc'

                },

                {

                    label: 'Num of Items',

                    field: 'numOfItems',

                    sort: 'asc'

                },

                {

                    label: 'Amount',

                    field: 'amount',

                    sort: 'asc'

                },

                {

                    label: 'Status',

                    field: 'status',

                    sort: 'asc'

                },

                {

                    label: 'Actions',

                    field: 'actions',

                    sort: 'asc'

                },

            ],

            rows: []

        }



        orders.forEach(order => {

            data.rows.push({

                id: order._id,

                numOfItems: order.orderItems.length,

                amount: `$${order.totalPrice}`,

                status: order.orderStatus && String(order.orderStatus).includes('Delivered')

                    ? <p style={{ color: 'green' }}>{order.orderStatus}</p>

                    : <p style={{ color: 'red' }}>{order.orderStatus}</p>,

                actions:

                    <Link to={`/order/${order._id}`} className="btn btn-primary">

                        <i className="fa fa-eye"></i>

                    </Link>

            })

        })



        return data;

    }



    return (

        <Fragment>

            <MetaData title={'My Orders'} />

            <h1 className="my-5">My Orders</h1>

            {loading ? <Loader /> : (

                <MDBDataTable

                    data={setOrders()}

                    className="px-3"

                    bordered

                    striped

                    hover

                />

            )}

        </Fragment>

    )

}



export default ListOrders



store

import { newOrderReducer, myOrdersReducer } from './reducers/orderReducers'

myOrders: myOrdersReducer,



app.js

import ListOrders from './components/order/ListOrders'

<Route path="/orders/me" 

            element={

             <ProtectedRoute >

                 <ListOrders />

             </ProtectedRoute> }  />



orderconstanst

export const ORDER_DETAILS_REQUEST = 'ORDER_DETAILS_REQUEST'

export const ORDER_DETAILS_SUCCESS = 'ORDER_DETAILS_SUCCESS'

export const ORDER_DETAILS_FAIL = 'ORDER_DETAILS_FAIL'



ordereducers

ORDER_DETAILS_REQUEST,

    ORDER_DETAILS_SUCCESS,

    ORDER_DETAILS_FAIL,



export const orderDetailsReducer = (state = { order: {} }, action) => {

    switch (action.type) {



        case ORDER_DETAILS_REQUEST:

            return {

                loading: true

            }



        case ORDER_DETAILS_SUCCESS:

            return {

                loading: false,

                order: action.payload

            }



        case ORDER_DETAILS_FAIL:

            return {

                loading: false,

                error: action.payload

            }

        case CLEAR_ERRORS:

            return {

                ...state,

                error: null

            }



        default:

            return state;

    }

}



store

import { newOrderReducer, myOrdersReducer,orderDetailsReducer } from './reducers/orderReducers'

orderDetails: orderDetailsReducer,



import ListOrders from './components/order/ListOrders'

<ProtectedRoute path="/orders/me" component={ListOrders} exact />



orderactions

ORDER_DETAILS_REQUEST,

    ORDER_DETAILS_SUCCESS,

    ORDER_DETAILS_FAIL,



// Get order details

export const getOrderDetails = (id) => async (dispatch) => {

    try {



        dispatch({ type: ORDER_DETAILS_REQUEST });



        const { data } = await axios.get(`/api/v1/order/${id}`)



        dispatch({

            type: ORDER_DETAILS_SUCCESS,

            payload: data.order

        })



    } catch (error) {

        dispatch({

            type: ORDER_DETAILS_FAIL,

            payload: error.response.data.message

        })

    }

}



component/order/orderDetails

import React, { Fragment, useEffect } from 'react'

import { Link, useParams } from 'react-router-dom'

import MetaData from '../layout/MetaData'

import Loader from '../layout/Loader'


import { useAlert } from 'react-alert'

import { useDispatch, useSelector } from 'react-redux'

import { getOrderDetails, clearErrors } from '../../actions/orderActions'



const OrderDetails = () => {



    const alert = useAlert();

    const dispatch = useDispatch();



    const { loading, error, order = {} } = useSelector(state => state.orderDetails)

    const { shippingInfo, orderItems, paymentInfo, user, totalPrice, orderStatus } = order



    let { id } = useParams();



    useEffect(() => {

        dispatch(getOrderDetails(id));



        if (error) {

            alert.error(error);

            dispatch(clearErrors())

        }

    }, [dispatch, alert, error, id])



    const shippingDetails = shippingInfo && `${shippingInfo.address}, ${shippingInfo.city}, ${shippingInfo.postalCode}, ${shippingInfo.country}`



    const isPaid = paymentInfo && paymentInfo.status === 'succeeded' ? true : false



    return (

        <Fragment>

            <MetaData title={'Order Details'} />



            {loading ? <Loader /> : (

                <Fragment>

                    <div className="row d-flex justify-content-between">

                        <div className="col-12 col-lg-8 mt-5 order-details">



                            <h1 className="my-5">Order # {order._id}</h1>



                            <h4 className="mb-4">Shipping Info</h4>

                            <p><b>Name:</b> {user && user.name}</p>

                            <p><b>Phone:</b> {shippingInfo && shippingInfo.phoneNo}</p>

                            <p className="mb-4"><b>Address:</b>{shippingDetails}</p>

                            <p><b>Amount:</b> ${totalPrice}</p>



                            <hr />



                            <h4 className="my-4">Payment</h4>

                            <p className={isPaid ? "greenColor" : "redColor"}><b>{isPaid ? "PAID" : "NOT PAID"}</b></p>





                            <h4 className="my-4">Order Status:</h4>

                            <p className={order.orderStatus && String(order.orderStatus).includes('Delivered') ? "greenColor" : "redColor"} ><b>{orderStatus}</b></p>





                            <h4 className="my-4">Order Items:</h4>



                            <hr />

                            <div className="cart-item my-1">

                                {orderItems && orderItems.map(item => (

                                    <div key={item.product} className="row my-5">

                                        <div className="col-4 col-lg-2">

                                            <img src={item.image} alt={item.name} height="45" width="65" />

                                        </div>



                                        <div className="col-5 col-lg-5">

                                            <Link to={`/products/${item.product}`}>{item.name}</Link>

                                        </div>





                                        <div className="col-4 col-lg-2 mt-4 mt-lg-0">

                                            <p>${item.price}</p>

                                        </div>



                                        <div className="col-4 col-lg-3 mt-4 mt-lg-0">

                                            <p>{item.quantity} Piece(s)</p>

                                        </div>

                                    </div>

                                ))}

                            </div>

                            <hr />

                        </div>

                    </div>

                </Fragment>

            )}



        </Fragment>

    )

}



export default OrderDetails



App.js

import OrderDetails from './components/order/OrderDetails'

<Route path="/order/:id" 

            element={

             <ProtectedRoute >

                 <OrderDetails />

             </ProtectedRoute> }  />

