exports.createProductReview = async (req, res, next) => {



    const { rating, comment, productId } = req.body;



    const review = {

        user: req.user._id,

        name: req.user.name,

        rating: Number(rating),

        comment

    }



    const product = await Product.findById(productId);



    const isReviewed = product.reviews.find(

        r => r.user.toString() === req.user._id.toString()

    )



    if (isReviewed) {

        product.reviews.forEach(review => {

            if (review.user.toString() === req.user._id.toString()) {

                review.comment = comment;

                review.rating = rating;

            }

        })



    } else {

        product.reviews.push(review);

        product.numOfReviews = product.reviews.length

    }



    product.ratings = product.reviews.reduce((acc, item) => item.rating + acc, 0) / product.reviews.length



    await product.save({ validateBeforeSave: false });



    res.status(200).json({

        success: true

    })



}

routes/product

const { getProducts,

    newProduct,

    getSingleProduct,

    updateProduct,

    deleteProduct,

    createProductReview,

} = require('../controllers/productController');

router.put('/review',isAuthenticatedUser, createProductReview);

{

		"productId": "63f1f177c227e3ff0fab9ad3",

        "rating": 4,

        "comment": "nice product"

}

review

productconstants

export const NEW_REVIEW_REQUEST = 'NEW_REVIEW_REQUEST'

export const NEW_REVIEW_SUCCESS = 'NEW_REVIEW_SUCCESS'

export const NEW_REVIEW_RESET = 'NEW_REVIEW_RESET'

export const NEW_REVIEW_FAIL = 'NEW_REVIEW_FAIL'



product Reducers



NEW_REVIEW_REQUEST,

    NEW_REVIEW_SUCCESS,

    NEW_REVIEW_RESET,

    NEW_REVIEW_FAIL,



export const newReviewReducer = (state = {}, action) => {

    switch (action.type) {



        case NEW_REVIEW_REQUEST:

            return {

                ...state,

                loading: true

            }



        case NEW_REVIEW_SUCCESS:

            return {

                loading: false,

                success: action.payload

            }



        case NEW_REVIEW_FAIL:

            return {

                ...state,

                error: action.payload

            }



        case NEW_REVIEW_RESET:

            return {

                ...state,

                success: false

            }



        case CLEAR_ERRORS:

            return {

                ...state,

                error: null

            }



        default:

            return state

    }

}



store

import { productsReducer, productDetailsReducer, newReviewReducer } from './reducers/productReducers'



newReview: newReviewReducer



productActions

NEW_REVIEW_REQUEST,

    NEW_REVIEW_SUCCESS,

    NEW_REVIEW_FAIL,



export const newReview = (reviewData) => async (dispatch) => {

    try {



        dispatch({ type: NEW_REVIEW_REQUEST })



        const config = {

            headers: {

                'Content-Type': 'application/json'

            }

        }



        const { data } = await axios.put(`/api/v1/review`, reviewData, config)



        dispatch({

            type: NEW_REVIEW_SUCCESS,

            payload: data.success

        })



    } catch (error) {

        dispatch({

            type: NEW_REVIEW_FAIL,

            payload: error.response.data.message

        })

    }

}



productDetails



const { user } = useSelector(state => state.auth)

const [rating, setRating] = useState(0);

    const [comment, setComment] = useState('');



<p id="product_seller mb-3">Sold by: <strong>{product.seller}</strong></p>



{user ? <button id="review_btn" type="button" className="btn btn-primary mt-4" data-toggle="modal" data-target="#ratingModal" onClick={setUserRatings}>

Submit Your Review

</button>

:

<div className="alert alert-danger mt-5" type='alert'>Login to post your review.</div>

}



 function setUserRatings() {

        const stars = document.querySelectorAll('.star');



        stars.forEach((star, index) => {

            star.starValue = index + 1;



            ['click', 'mouseover', 'mouseout'].forEach(function (e) {

                star.addEventListener(e, showRatings);

            })

        })

        }



function showRatings(e) {

            stars.forEach((star, index) => {

                if (e.type === 'click') {

                    if (index < this.starValue) {

                        star.classList.add('orange');



                        setRating(this.starValue)

                    } else {

                        star.classList.remove('orange')

                    }

                }



                if (e.type === 'mouseover') {

                    if (index < this.starValue) {

                        star.classList.add('yellow');

                    } else {

                        star.classList.remove('yellow')

                    }

                }



                if (e.type === 'mouseout') {

                    star.classList.remove('yellow')

                }

            })

        }

    }



const [rating, setRating] = useState(0);

    const [comment, setComment] = useState('');

    const [rating, setRating] = useState(0);

    

const { error: reviewError, success } = useSelector(state => state.newReview)



//useeffect

if (reviewError) {

            alert.error(reviewError);

            dispatch(clearErrors())

        }



        if (success) {

            alert.success('Reivew posted successfully')

            dispatch({ type: NEW_REVIEW_RESET })

        }



const reviewHandler = () => {

        const formData = new FormData();



        formData.set('rating', rating);

        formData.set('comment', comment);

        formData.set('productId', match.params.id);



        dispatch(newReview(formData));

    }



import { NEW_REVIEW_RESET } from '../../constants/productConstants'

import { getProductDetails, newReview, clearErrors } from '../../actions/productActions'





<button className="btn my-3 float-right review-btn px-4 text-white" onClick={reviewHandler} data-dismiss="modal" aria-label="Close">Submit</button>



<textarea

                                                        name="review"

                                                        id="review" className="form-control mt-3"

                                                        value={comment}

                                                        onChange={(e) => setComment(e.target.value)}

                                                    >



                                                    </textarea>



useEffect(() => {

        dispatch(getProductDetails(id))



        if (error) {

            alert.error(error);

            dispatch(clearErrors())

        }



        if (reviewError) {

            alert.error(reviewError);

            dispatch(clearErrors())

        }



        if (success) {

            alert.success('Reivew posted successfully')

            dispatch({ type: NEW_REVIEW_RESET })

        }



    }, [dispatch, alert, error, reviewError, id, success])





productcontroller

exports.getProductReviews = async (req, res, next) => {

    const product = await Product.findById(req.query.id);

    res.status(200).json({

        success: true,

        reviews: product.reviews

    })

}

router.get('/reviews',isAuthenticatedUser, getProductReviews)

component/review/listReviews

import React from 'react'



const ListReviews = ({ reviews }) => {

    return (

        <div class="reviews w-75">

            <h3>Other's Reviews:</h3>

            <hr />

            {reviews && reviews.map(review => (

                <div key={review._id} class="review-card my-3">

                    <div className="rating-outer">

                        <div className="rating-inner" style={{ width: `${(review.rating / 5) * 100}%` }}></div>

                    </div>

                    <p class="review_user">by {review.name}</p>

                    <p class="review_comment">{review.comment}</p>



                    <hr />

                </div>

            ))}

        </div>

    )

}



export default ListReviews



productDetails

 {product.reviews && product.reviews.length > 0 && (

                        <ListReviews reviews={product.reviews} />

                    )}



import ListReviews from '../review/ListReviews'



admin/sidebar

import React from 'react'

import { Link } from 'react-router-dom'



const Sidebar = () => {

    return (

        <div className="sidebar-wrapper">

            <nav id="sidebar">

                <ul className="list-unstyled components">

                    <li>

                        <Link to="/dashboard"><i className="fa fa-tachometer"></i> Dashboard</Link>

                    </li>



                    <li>

                        <a href="#productSubmenu" data-toggle="collapse" aria-expanded="false" className="dropdown-toggle"><i

                            className="fa fa-product-hunt"></i> Products</a>

                        <ul className="collapse list-unstyled" id="productSubmenu">

                            <li>

                                <Link to="/admin/products"><i className="fa fa-clipboard"></i> All</Link>

                            </li>



                            <li>

                                <Link to="/admin/product"><i className="fa fa-plus"></i> Create</Link>

                            </li>

                        </ul>

                    </li>



                    <li>

                        <Link to="/admin/orders"><i className="fa fa-shopping-basket"></i> Orders</Link>

                    </li>



                    <li>

                        <Link to="/admin/users"><i className="fa fa-users"></i> Users</Link>

                    </li>



                    <li>

                        <Link to="/admin/reviews"><i className="fa fa-star"></i> Reviews</Link>

                    </li>



                </ul>

            </nav>

        </div>

    )

}



export default Sidebar



admin/dashboard

import React, { Fragment, useEffect } from 'react'

import { Link } from 'react-router-dom';



import MetaData from '../layout/MetaData'

import Loader from '../layout/Loader'

import Sidebar from './Sidebar'



import { useDispatch, useSelector } from 'react-redux'



import { getAdminProducts } from '../../actions/productActions'

import { allOrders } from '../../actions/orderActions'

import { allUsers } from '../../actions/userActions'



const Dashboard = () => {



    const dispatch = useDispatch();



    const { products } = useSelector(state => state.products)

    const { users } = useSelector(state => state.allUsers)

    const { orders, totalAmount, loading } = useSelector(state => state.allOrders)



    let outOfStock = 0;

    products.forEach(product => {

        if (product.stock === 0) {

            outOfStock += 1;

        }

    })



    useEffect(() => {

        dispatch(getAdminProducts())

        dispatch(allOrders())

        dispatch(allUsers())

    }, [dispatch])



    return (

        <Fragment>

            <div className="row">

                <div className="col-12 col-md-2">

                    <Sidebar />

                </div>



                <div className="col-12 col-md-10">

                    <h1 className="my-4">Dashboard</h1>



                    {loading ? <Loader /> : (

                        <Fragment>

                            <MetaData title={'Admin Dashboard'} />



                            <div className="row pr-4">

                                <div className="col-xl-12 col-sm-12 mb-3">

                                    <div className="card text-white bg-primary o-hidden h-100">

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Total Amount<br /> <b>${totalAmount && totalAmount.toFixed(2)}</b>

                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>



                            <div className="row pr-4">

                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-success o-hidden h-100">

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Products<br /> <b>{products && products.length}</b></div>

                                        </div>

                                        <Link className="card-footer text-white clearfix small z-1" to="/admin/products">

                                            <span className="float-left">View Details</span>

                                            <span className="float-right">

                                                <i className="fa fa-angle-right"></i>

                                            </span>

                                        </Link>

                                    </div>

                                </div>





                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-danger o-hidden h-100">

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Orders<br /> <b>{orders && orders.length}</b></div>

                                        </div>

                                        <Link className="card-footer text-white clearfix small z-1" to="/admin/orders">

                                            <span className="float-left">View Details</span>

                                            <span className="float-right">

                                                <i className="fa fa-angle-right"></i>

                                            </span>

                                        </Link>

                                    </div>

                                </div>





                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-info o-hidden h-100">

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Users<br /> <b>{users && users.length}</b></div>

                                        </div>

                                        <Link className="card-footer text-white clearfix small z-1" to="/admin/users">

                                            <span className="float-left">View Details</span>

                                            <span className="float-right">

                                                <i className="fa fa-angle-right"></i>

                                            </span>

                                        </Link>

                                    </div>

                                </div>





                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-warning o-hidden h-100">

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Out of Stock<br /> <b>{outOfStock}</b></div>

                                        </div>

                                    </div>

                                </div>

                            </div>

                        </Fragment>

                    )}



                </div>

            </div>



        </Fragment >

    )

}



export default Dashboard



App



import Dashboard from './components/admin/Dashboard'

 <Route

        path="/dashboard"

        element={

          <ProtectedRoute isAdmin={true}>

            <Dashboard />

          </ProtectedRoute>

        }

      />



protectedroute

const ProtectedRoute = ({ isAdmin, component: Component, ...rest }) => {



if (isAdmin === true && user.role !== 'admin') {

                            return <Redirect to="/" />

                        }                                                







Dashboard

import React, { Fragment, useEffect } from 'react'

import { Link } from 'react-router-dom';



import MetaData from '../layout/MetaData'

import Loader from '../layout/Loader'

import Sidebar from './Sidebar'



import { useDispatch, useSelector } from 'react-redux'



import { getAdminProducts } from '../../actions/productActions'

import { allOrders } from '../../actions/orderActions'

import { allUsers } from '../../actions/userActions'



const Dashboard = () => {



    const dispatch = useDispatch();



    const { products } = useSelector(state => state.products)

    // const { users } = useSelector(state => state.allUsers)

    // const { orders, totalAmount, loading } = useSelector(state => state.allOrders)



    // let outOfStock = 0;

    // products.forEach(product => {

    //     if (product.stock === 0) {

    //         outOfStock += 1;

    //     }

    // })



    // useEffect(() => {

    //     dispatch(getAdminProducts())

    //     dispatch(allOrders())

    //     dispatch(allUsers())

    // }, [dispatch])



    return (

        <Fragment>

            <div className="row">

                <div className="col-12 col-md-2">

                    <Sidebar />

                </div>



                <div className="col-12 col-md-10">

                    <h1 className="my-4">Dashboard</h1>



                    {false ? <Loader /> : (

                        <Fragment>

                            <MetaData title={'Admin Dashboard'} />



                            <div className="row pr-4">

                                <div className="col-xl-12 col-sm-12 mb-3">

                                    <div className="card text-white bg-primary o-hidden h-100">

                                        <div className="card-body">

                                            {/*<div className="text-center card-font-size">Total Amount<br /> <b>${totalAmount && totalAmount.toFixed(2)}</b>

                                            </div>*/}



                                            <div className="text-center card-font-size">Total Amount<br /> <b>42</b>

                                            </div>

                                        </div>

                                    </div>

                                </div>

                            </div>



                            <div className="row pr-4">

                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-success o-hidden h-100">

                                        

                                        {/*<div className="card-body">

                                            <div className="text-center card-font-size">Products<br /> <b>{products && products.length}</b></div>

                                        </div>*/}



                                        <div className="card-body">

                                            <div className="text-center card-font-size">Products<br /> <b>{products && products.length}</b></div>

                                        </div>



                                        <Link className="card-footer text-white clearfix small z-1" to="/admin/products">

                                            <span className="float-left">View Details</span>

                                            <span className="float-right">

                                                <i className="fa fa-angle-right"></i>

                                            </span>

                                        </Link>

                                    </div>

                                </div>





                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-danger o-hidden h-100">

                                        

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Orders<br /> <b>54</b></div>

                                        </div>



                                        {/*<div className="card-body">

                                            <div className="text-center card-font-size">Orders<br /> <b>{orders && orders.length}</b></div>

                                        </div>*/}



                                        <Link className="card-footer text-white clearfix small z-1" to="/admin/orders">

                                            <span className="float-left">View Details</span>

                                            <span className="float-right">

                                                <i className="fa fa-angle-right"></i>

                                            </span>

                                        </Link>

                                    </div>

                                </div>





                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-info o-hidden h-100">

                                        

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Users<br /> <b>42</b></div>

                                        </div>



                                        {/*<div className="card-body">

                                            <div className="text-center card-font-size">Users<br /> <b>{users && users.length}</b></div>

                                        </div>*/}

 

                                        <Link className="card-footer text-white clearfix small z-1" to="/admin/users">

                                            <span className="float-left">View Details</span>

                                            <span className="float-right">

                                                <i className="fa fa-angle-right"></i>

                                            </span>

                                        </Link>

                                    </div>

                                </div>





                                <div className="col-xl-3 col-sm-6 mb-3">

                                    <div className="card text-white bg-warning o-hidden h-100">

                                        <div className="card-body">

                                            <div className="text-center card-font-size">Out of Stock<br /> <b>0</b></div>

                                        </div>



                                       {/* <div className="card-body">

                                            <div className="text-center card-font-size">Out of Stock<br /> <b>{outOfStock}</b></div>

                                        </div>*/}

                                    </div>

                                </div>

                            </div>

                        </Fragment>

                    )}



                </div>

            </div>



        </Fragment >

    )

}



export default Dashboard



productcontroller

// Get all products (Admin)  =>   /api/v1/admin/products

exports.getAdminProducts = async (req, res, next) => {



    const products = await Product.find();



    res.status(200).json({

        success: true,

        products

    })



}



route/product

router.get('/admin/products', getAdminProducts);



productconstants

export const ADMIN_PRODUCTS_REQUEST = 'ADMIN_PRODUCTS_REQUEST'

export const ADMIN_PRODUCTS_SUCCESS = 'ADMIN_PRODUCTS_SUCCESS'

export const ADMIN_PRODUCTS_FAIL = 'ADMIN_PRODUCTS_FAIL'



productreducers

ADMIN_PRODUCTS_REQUEST,

        ADMIN_PRODUCTS_SUCCESS,

        ADMIN_PRODUCTS_FAIL,



case ALL_PRODUCTS_FAIL:

case ADMIN_PRODUCTS_FAIL:

 case ADMIN_PRODUCTS_SUCCESS:

            return {

                loading: false,

                products: action.payload

            }





productactions

export const getAdminProducts = () => async (dispatch) => {

    try {



        dispatch({ type: ADMIN_PRODUCTS_REQUEST })



        const { data } = await axios.get(`/api/v1/admin/products`)



        dispatch({

            type: ADMIN_PRODUCTS_SUCCESS,

            payload: data.products

        })



    } catch (error) {



        dispatch({

            type: ADMIN_PRODUCTS_FAIL,

            payload: error.response.data.message

        })

    }

}



admin/ProductsList.js

import React, { Fragment, useEffect } from 'react'

import { Link, useNavigate } from 'react-router-dom'

import { MDBDataTable } from 'mdbreact'



import MetaData from '../layout/MetaData'

import Loader from '../layout/Loader'

import Sidebar from './Sidebar'



import { useAlert } from 'react-alert'

import { useDispatch, useSelector } from 'react-redux'

import { getAdminProducts, deleteProduct, clearErrors } from '../../actions/productActions'

import { DELETE_PRODUCT_RESET } from '../../constants/productConstants'



const ProductsList = () => {



    const alert = useAlert();

    const dispatch = useDispatch();

    let navigate = useNavigate()

    const { loading, error, products } = useSelector(state => state.products);

    // const { error: deleteError, isDeleted } = useSelector(state => state.product)



    useEffect(() => {

        dispatch(getAdminProducts());



        if (error) {

            alert.error(error);

            dispatch(clearErrors())

        }



        // if (deleteError) {

        //     alert.error(deleteError);

        //     dispatch(clearErrors())

        // }



        // if (isDeleted) {

        //     alert.success('Product deleted successfully');

        //     navigate('/admin/products');

        //     dispatch({ type: DELETE_PRODUCT_RESET })

        // }



    }, [dispatch, alert, error, navigate])

 

    // [dispatch, alert, error, deleteError, isDeleted, navigate])



    const setProducts = () => {

        const data = {

            columns: [

                {

                    label: 'ID',

                    field: 'id',

                    sort: 'asc'

                },

                {

                    label: 'Name',

                    field: 'name',

                    sort: 'asc'

                },

                {

                    label: 'Price',

                    field: 'price',

                    sort: 'asc'

                },

                {

                    label: 'Stock',

                    field: 'stock',

                    sort: 'asc'

                },

                {

                    label: 'Actions',

                    field: 'actions',

                },

            ],

            rows: []

        }



        products.forEach(product => {

            data.rows.push({

                id: product._id,

                name: product.name,

                price: `$${product.price}`,

                stock: product.stock,

                actions: <Fragment>

                    <Link to={`/admin/product/${product._id}`} className="btn btn-primary py-1 px-2">

                        <i className="fa fa-pencil"></i>

                    </Link>

                    <button className="btn btn-danger py-1 px-2 ml-2" onClick={() => deleteProductHandler(product._id)}>

                        <i className="fa fa-trash"></i>

                    </button>

                </Fragment>

            })

        })



        return data;

    }



    const deleteProductHandler = (id) => {

        // dispatch(deleteProduct(id))

    }



    return (

        <Fragment>

            <MetaData title={'All Products'} />

            <div className="row">

                <div className="col-12 col-md-2">

                    <Sidebar />

                </div>



                <div className="col-12 col-md-10">

                    <Fragment>

                        <h1 className="my-5">All Products</h1>



                        {loading ? <Loader /> : (

                            <MDBDataTable

                                data={setProducts()}

                                className="px-3"

                                bordered

                                striped

                                hover

                            />

                        )}



                    </Fragment>

                </div>

            </div>



        </Fragment>

    )

}



export default ProductsList





dashboard

 let outOfStock = 0;

    products.forEach(product => {

        if (product.stock === 0) {

            outOfStock += 1;

        }

    })





app.js

import ProductsList from './components/admin/ProductsList'

<Route

        path="/admin/products"

        element={

          <ProtectedRoute isAdmin={true}>

            <ProductsList />

          </ProtectedRoute>

        }

      />